@page "/play"
@page "/play/{RoomCode}"

@inject HubConnection HubConnection
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject ISessionStorageService SessionStorage
@inject NavigationManager NavigationManager
@inject RoomManager RoomManager

<PageTitle>Nối từ - @RoomCode</PageTitle>

<MudGrid>
    <MudItem xs="12">
        <RoomCode Code="@RoomCode" Username="@Username"/>
    </MudItem>
    <MudItem xs="3">
        <UserInput User="@UserA" RoomCode="@RoomCode" />
    </MudItem>

    <MudItem xs="3">
        <UserInput User="@UserB" RoomCode="@RoomCode" />

    </MudItem>

    <MudItem xs="6">
        <WordsList/>
    </MudItem>
</MudGrid>

@code {
    [Parameter]
    public string RoomCode { get; set; } = "";

    public User UserA { get; set; } = new();
    public User UserB { get; set; } = new();

    public string Username { get; set; } = "";

    List<string> Users = [];

    protected override async Task OnInitializedAsync()
    {
        if (!IsValidRoom())
        {
            ToHome();
            return;
        }

        HubConnection.On<List<string>>("RoomJoined", (users) =>
        {
            Users.Clear();
            Users.AddRange(users);

            switch(users.Count)
            {
                case 1: EmptyRoomHandler(); break;
                case 2: ReadyRoomHandler(); break;
                default: FullRoomHandler(); break;
            }
        });

        HubConnection.On<string>("UserJoined", (userName) =>
        {
            Snackbar.Add($"{userName} đã vào phòng", Severity.Warning);
            Users.Add(userName);

            switch (Users.Count)
            {
                case 0: EmptyRoomHandler(false); break;
                case 1: ReadyRoomHandler(false); break;
                case 2: FullRoomHandler(false); break;
            }
        });

        HubConnection.On<string>("UserLeave", (userName) =>
        {
            Snackbar.Add($"{userName} đã rời phòng", Severity.Warning);
            Users.Remove(userName);

            switch (Users.Count)
            {
                case 0: EmptyRoomHandler(false); break;
                case 1: ReadyRoomHandler(false); break;
                case 2: FullRoomHandler(false); break;
            }
        });

        await Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var username = await SessionStorage.GetItemAsync<string>("Username");

            if (string.IsNullOrEmpty(username))
            {
                ToHome();
                return;
            }

            Username = username;
            if (HubConnection.State == HubConnectionState.Disconnected)
            {
                await HubConnection.StartAsync();
            }
            await HubConnection.SendAsync("JoinRoom", RoomCode, username);
            await InvokeAsync(StateHasChanged);
        }

    }

    private void ToHome()
    {
        NavigationManager.NavigateTo("/");
    }

    private bool IsValidRoom()
    {
        if (string.IsNullOrEmpty(RoomCode)) return false;
        if (!RoomManager.IsRoomExists(RoomCode)) return false;
        return true;
    }

    private void EmptyRoomHandler(bool enableNotification = true)
    {
        if (enableNotification)
        {
            Snackbar.Add("Chờ người chơi khác vào phòng", Severity.Info);
        }
        UserA.Set(Users[0], true);
        UserB.Reset();
    }


    private void ReadyRoomHandler(bool enableNotification = true)
    {
        if (enableNotification)
        {
            Snackbar.Add("Bắt đầu chơi", Severity.Success);
        }
        UserA.Set(Users[0], Users[0] == Username);
        UserB.Set(Users[1], Users[1] == Username);

    }

    private void FullRoomHandler(bool enableNotification = true)
    {
        if (enableNotification)
        {
            Snackbar.Add("Phòng đã đầy nhưng bạn có thể quan sát", Severity.Info);
        }
        UserA.Set(Users[0], Users[0] == Username);
        UserB.Set(Users[1], Users[1] == Username);

    }


}