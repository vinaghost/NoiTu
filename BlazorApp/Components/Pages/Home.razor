@page "/"

@implements IAsyncDisposable

@inject HubConnection HubConnection;
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject ILocalStorageService LocalStorage

<PageTitle>Nối từ</PageTitle>

@if (!IsJoined)
{
    <MudPaper Class="align-center justify-center mud-width-full pa-8">
        <MudForm  @bind-IsValid="@IsSuccess">
            <MudStack>
                <MudText Typo="Typo.h5">Vào game</MudText>
                <MudTextField @bind-Value="Username" Label="Tên hiển thị" Variant="Variant.Outlined" Required="true" RequiredError="Tên hiển thị không được để trống!" />
                <MudStack Row="true">
                    <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="CreateRoom" Disabled="@(!IsConnected)">Tạo phòng</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Surface" OnClick="JoinRoom" Disabled="@(!IsConnected)">Vào phòng</MudButton>
                </MudStack>
            </MudStack>
        </MudForm>
    </MudPaper>
}
else
{
    <Playground GroupName="@GroupName"/>
}
@code {
    bool IsJoined = false;
    string Username = "";
    string GroupName = "hi";

    bool IsSuccess;

    protected override async Task OnInitializedAsync()
    {
        HubConnection.On<string>("RoomJoined", (groupName) =>
        {
            IsJoined = true;
            GroupName = groupName;
            InvokeAsync(StateHasChanged);

            Snackbar.Add($"Đã vào phòng {groupName}", Severity.Success);
        });

        HubConnection.On<string>("UserJoined", (userName) =>
        {
            Snackbar.Add($"{userName} đã vào phòng", Severity.Warning);
        });

        HubConnection.On<string>("RoomNotFound", (groupName) =>
        {
            Snackbar.Add($"{groupName} không tồn tại", Severity.Error);
        });

        HubConnection.On<string>("UserLeave", (userName) =>
        {
            Snackbar.Add($"{userName} đã rời phòng", Severity.Warning);
        });

        await HubConnection.StartAsync();
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadUsername();
        }

    }

    async Task LoadUsername()
    {
        var name = await LocalStorage.GetItemAsync<string>("Username");
        if (!string.IsNullOrEmpty(name))
        {
            Username = name;
            await InvokeAsync(StateHasChanged);
        }
    }

    async Task CreateRoom()
    {
        if (!IsSuccess) return;
        await HubConnection.SendAsync("CreateRoom", Username);
        await LocalStorage.SetItemAsStringAsync("Username", Username);
    }


    async Task JoinRoom()
    {
        if (!IsSuccess) return;

        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters<InputDialog> { 
             { x => x.Title, "Mã phòng" },
             { x => x.Callback, (roomCode) => HubConnection.SendAsync("JoinRoom", roomCode, Username) },
        };

        await DialogService.ShowAsync<InputDialog>("Nhập mã phòng", parameters,options );
    }

    public bool IsConnected =>
        HubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (HubConnection is not null)
        {
            await HubConnection.DisposeAsync();
        }
    }
}